/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package test.ci.bamba.regis.momoapi;

import org.junit.After;
import org.junit.Assert;
import org.junit.Test;

import ci.bamba.regis.Collections;
import ci.bamba.regis.Environment;
import ci.bamba.regis.MoMo;
import ci.bamba.regis.exceptions.RequestException;
import io.reactivex.disposables.Disposable;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

public class CollectionsTest extends BaseTest {

    private Disposable disposable;

    public void init() {
        this.type = "collections";
        super.init();
    }

    @After
    public void takeDown() {
        if (disposable != null) {
            disposable.dispose();
        }
    }

    @Test
    public void testNewMoMo() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        assertNotNull(momo);
        assertEquals(Environment.SANDBOX, momo.getEnvironment());

        MoMo momo2 = new MoMo(Environment.PRODUCTION);
        assertNotNull(momo2);
        assertEquals(Environment.PRODUCTION, momo2.getEnvironment());
    }

    @Test
    public void testCollectionsSubscribeToProduct() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        assertNotNull(collections);
        assertEquals(collections.getSubscriptionKey(), subscriptionKey);
        assertNotNull(collections.getBaseUrl());
        assertEquals(collections.getEnvironment(), momo.getEnvironment());
    }

    @Test
    public void testCollectionsCreateApiUserSuccess() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections
                .createApiUser("www.example.com")
                .subscribe(referenceId -> {
                    assertNotNull(referenceId);
                    assertEquals(36, referenceId.length());
                }, throwable -> {
                    RequestException e = (RequestException) throwable;
                    fail(String.format("\nCode: %s\nMessage: %s", e.getCode(), e.getMessage()));
                });
    }

    @Test
    public void testCollectionsGetApiUser() {
        String host = "www.example.com";
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections
                .createApiUser(host)
                .flatMap(collections::getApiUser)
                .subscribe(apiUser -> {
                    assertNotNull(apiUser);
                    assertEquals(host, apiUser.getProviderCallbackHost());
                }, throwable -> {
                    RequestException e = (RequestException) throwable;
                    fail(String.format("\nCode: %s\nMessage: %s", e.getCode(), e.getMessage()));
                });
    }

    @Test
    public void testCollectionsCreateApiUserError() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections("");
        disposable = collections
                .createApiUser("www.example.com")
                .subscribe(Assert::assertNull, throwable -> {
                    RequestException e = (RequestException) throwable;
                    assertEquals(401, e.getCode());
                });
    }

    @Test
    public void testCollectionsCreateApiKeySuccess() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections
                .createApiUser("www.example.com")
                .flatMap(referenceId -> {
                    assertNotNull(referenceId);
                    return collections.createApiKey(referenceId);
                }).subscribe(apiCredentials -> {
                    assertNotNull(apiCredentials);
                    assertNotEquals(0, apiCredentials.getApiKey().length());
                });
    }

    @Test
    public void testCollectionsCreateApiKeyError() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections
                .createApiUser("www.example.com")
                .flatMap(referenceId -> {
                    assertNotNull(referenceId);
                    return collections.createApiKey("err" + referenceId);
                }).subscribe(Assert::assertNull, throwable -> {
                    RequestException e = (RequestException) throwable;
                    assertEquals(400, e.getCode());
                });
    }

    @Test
    public void testCollectionsCreateToken1() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createToken().subscribe(
                token -> {
                    assertNotNull(token);
                    assertNotEquals(0, token.getAccessToken().length());
                    assertEquals(3600, token.getExpiresIn());
                    assertEquals("access_token", token.getTokenType());
                }
        );
    }

    @Test
    public void testCollectionsCreateToken2() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createToken("www.host.com").subscribe(
                token -> {
                    assertNotNull(token);
                    assertNotEquals(0, token.getAccessToken().length());
                    assertEquals(3600, token.getExpiresIn());
                    assertEquals("access_token", token.getTokenType());
                }
        );
    }


    @Test
    public void testCollectionsCreateTokenSuccess() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createApiUser("www.example.com")
                .flatMap(apiUser -> {
                    assertNotNull(apiUser);
                    return collections.createApiKey(apiUser);
                }).flatMap(apiCredentials -> {
                    assertNotNull(apiCredentials);
                    return collections.createToken(apiCredentials.getApiUser(), apiCredentials.getApiKey());
                }).subscribe(token -> {
                    assertNotNull(token);
                    assertNotEquals(0, token.getAccessToken().length());
                    assertEquals(3600, token.getExpiresIn());
                    assertEquals("access_token", token.getTokenType());
                });
    }

    @Test
    public void testCollectionsCreateTokenError() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createApiUser("www.example.com")
                .flatMap(apiUser -> {
                    assertNotNull(apiUser);
                    return collections.createApiKey(apiUser);
                }).flatMap(apiCredentials -> {
                    assertNotNull(apiCredentials);
                    return collections.createToken("err" + apiCredentials.getApiUser(), apiCredentials.getApiKey());
                }).subscribe(Assert::assertNull, throwable -> {
                    RequestException e = (RequestException) throwable;
                    assertEquals(500, e.getCode());
                });
    }

    @Test
    public void testCollectionsRequestToPaySuccess() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections
                .createToken()
                .flatMap(token -> {
                    assertNotNull(token.getAccessToken());
                    return collections.requestToPay(token.getAccessToken(), 900, "EUR", "test", "0022506885888", "test", "test");
                })
                .subscribe(referenceId -> {
                    assertNotNull(referenceId);
                    assertEquals(36, referenceId.length());
                });
    }

    @Test
    public void testCollectionsGetRequestToPay1() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createToken()
                .flatMap(token -> collections.requestToPay(token.getAccessToken(), 900, "EUR", "test", "0022505777777", "test", "test")
                        .flatMap(referenceId -> collections.getRequestToPay(token.getAccessToken(), referenceId))
                ).subscribe(requestToPay -> {
                    assertNotNull(requestToPay);
                    assertEquals("900", requestToPay.getAmount());
                });
    }

    @Test
    public void testCollectionsGetAccountBalance() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createToken()
                .flatMap(token -> collections.getAccountBalance(token.getAccessToken()))
                .subscribe(Assert::assertNotNull, throwable -> {
                    RequestException e = (RequestException) throwable;
                    assertNotNull(e);
                });
    }

    @Test
    public void testCollectionsGetAccountStatus() {
        MoMo momo = new MoMo(Environment.SANDBOX);
        Collections collections = momo.subscribeToCollections(subscriptionKey);
        disposable = collections.createToken()
                .flatMap(token -> collections.getAccountStatus(token.getAccessToken(), "46733123451"))
                .subscribe(Assert::assertNotNull, throwable -> {
                    RequestException e = (RequestException) throwable;
                    assertNotNull(e);
                });
    }
}
